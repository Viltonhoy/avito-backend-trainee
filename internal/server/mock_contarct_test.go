// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package server is a generated GoMock package.
package server

import (
	generated "avito-backend-trainee/internal/generated"
	storage "avito-backend-trainee/internal/storage"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockStorager is a mock of Storager interface.
type MockStorager struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerMockRecorder
}

// MockStoragerMockRecorder is the mock recorder for MockStorager.
type MockStoragerMockRecorder struct {
	mock *MockStorager
}

// NewMockStorager creates a new mock instance.
func NewMockStorager(ctrl *gomock.Controller) *MockStorager {
	mock := &MockStorager{ctrl: ctrl}
	mock.recorder = &MockStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorager) EXPECT() *MockStoragerMockRecorder {
	return m.recorder
}

// AddNewAd mocks base method.
func (m *MockStorager) AddNewAd(ctx context.Context, name, description string, links []string, price decimal.Decimal) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewAd", ctx, name, description, links, price)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewAd indicates an expected call of AddNewAd.
func (mr *MockStoragerMockRecorder) AddNewAd(ctx, name, description, links, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewAd", reflect.TypeOf((*MockStorager)(nil).AddNewAd), ctx, name, description, links, price)
}

// ReadAd mocks base method.
func (m *MockStorager) ReadAd(ctx context.Context, id int64, fields ...storage.AdditionalFields) (generated.GetAdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadAd", varargs...)
	ret0, _ := ret[0].(generated.GetAdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAd indicates an expected call of ReadAd.
func (mr *MockStoragerMockRecorder) ReadAd(ctx, id interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAd", reflect.TypeOf((*MockStorager)(nil).ReadAd), varargs...)
}

// ReadAllAds mocks base method.
func (m *MockStorager) ReadAllAds(ctx context.Context, order *storage.OrdBy, offset int64, gradation storage.PaginationFields) ([]storage.GetAdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllAds", ctx, order, offset, gradation)
	ret0, _ := ret[0].([]storage.GetAdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllAds indicates an expected call of ReadAllAds.
func (mr *MockStoragerMockRecorder) ReadAllAds(ctx, order, offset, gradation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllAds", reflect.TypeOf((*MockStorager)(nil).ReadAllAds), ctx, order, offset, gradation)
}
